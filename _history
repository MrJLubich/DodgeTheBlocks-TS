{"entries":[{"timestamp":1761031590378,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":133,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":1,"length1":2991,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":231,"length1":31,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]}]},{"timestamp":1761675756255,"editorVersion":"8.0.18","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1904,"length1":32,"diffs":[[1,"    constructor(game: Game) {\n"]]}]}]},{"timestamp":1761675762332,"editorVersion":"8.0.18","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":84,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":1904,"length1":44,"diffs":[[1,"    constructor(game: Game, ) {\n"]]},{"start1":1959,"length1":26,"diffs":[[1,""]]},{"start1":2783,"length1":105,"diffs":[[1,"    let newB = new Block(myGame);\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":231,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1761031590377,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"myJsTest\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1761037081985,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block></xml>","main.ts":"\nclass Game {\n    running: boolean;\n    player: Player;\n    blocks: Block[];\n\n    constructor(player: Player) {\n        this.running = true;\n        this.player = player;\n        this.blocks = [];\n    }\n\n    addBlock(block: Block) :void {\n        this.blocks.push(block);\n    }\n\n    update() {\n        input.onButtonPressed(Button.A, function() {\n            // Left Wall Detection\n            if (this.player.xpos > 1) {\n                // Move Left\n                this.player.xpos -= 1;\n            }\n        })\n        input.onButtonPressed(Button.B, function () {\n            // Right Wall Detection\n            if (this.player.xpos < 5){\n                // Move Right\n                this.player.xpos += 1;\n            }\n        })\n\n        // Delete block if it falls past\n        if (this.blocks[0].xpos < 0) {\n            this.blocks.shift();\n        }\n\n        for (let b of this.blocks) {\n            if (b.checkCollision()) {\n                \n            }\n        }\n    }\n\n    resetScreen() {\n        // Reset Screen\n        for (let x = 0; x < 5; x++) {\n            for (let y = 0; y < 5; y++) {\n                led.unplot(x, y)\n            }\n        }\n    }\n\n    render() {\n        this.resetScreen();\n        // Draw Player Pixel to Screen\n        this.player.draw();\n        for (let b of this.blocks) {\n            b.draw();\n        }\n    }\n}\n\n\nclass Player {\n\n    xpos: number;\n    ypos: number;\n    xpix: number;\n    ypix: number;\n    constructor() {\n        this.xpos = 1;\n        this.ypos = 1;\n    }\n\n    draw() :void {\n        this.xpix = this.xpos - 1;\n        this.ypix = 5 - this.ypos;\n        led.plot(this.xpix, this.ypix);\n    }\n}\n\nclass Block {\n    \n    xpos: number;\n    ypos: number;\n    xpix: number;\n    ypix: number;\n\n    game: Game;\n\n    constructor(game: Game) {\n        this.ypos = 6;\n        // this.xpos = randint(1, 5);\n        this.xpos = game.player.xpos;\n        \n        this.game = game\n        game.addBlock(this);\n    }\n\n    checkCollision() :boolean {\n        if (this.xpos == this.game.player.xpos && this.ypos == 1) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    draw() :void {\n        this.xpix = this.xpos - 1;\n        this.ypix = 5 - this.ypos;\n        led.plot(this.xpix, this.ypix);\n    }\n}\n\n// Init\nlet myPlayer = new Player();\nlet myGame = new Game(myPlayer);\n\n// INIT: Countdown\nfor (let i = 3; i >= 1; i--){\n    basic.showNumber(i);\n}\n\n// Game Clock\nlet interval: number = 600;\nloops.everyInterval(interval, function () {\n    for(let b of myGame.blocks){\n        b.ypos -= 1;\n    }\n})\n\nloops.everyInterval(interval*2.5, function () {\n    let newB = new Block(myGame);\n})\n\n// Loop\nbasic.forever(function() {\n    myGame.update();\n    myGame.render();\n})\n","README.md":"","pxt.json":"{\n    \"name\": \"myJsTest\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1761675756255,"editorVersion":"8.0.18","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block></xml>","main.ts":"\nclass Game {\n    running: boolean;\n    score: number;\n    player: Player;\n    blocks: Block[];\n\n    constructor(player: Player) {\n        this.running = true;\n        this.score = 0;\n        this.player = player;\n        this.blocks = [];\n    }\n\n    addBlock(block: Block) :void {\n        this.blocks.push(block);\n    }\n\n    update() {\n        input.onButtonPressed(Button.A, function() {\n            // Left Wall Detection\n            if (this.player.xpos > 1) {\n                // Move Left\n                this.player.xpos -= 1;\n            }\n        })\n        input.onButtonPressed(Button.B, function () {\n            // Right Wall Detection\n            if (this.player.xpos < 5){\n                // Move Right\n                this.player.xpos += 1;\n            }\n        })\n\n        // Delete block if it falls past\n        if (this.blocks[0].ypos <= 0 && this.blocks[0].xpos != this.player.xpos){\n            this.blocks.shift();\n            this.score++;\n        }\n\n        for (let b of this.blocks) {\n            if (b.checkCollision()) {\n                this.running = false;\n            }\n        }\n    }\n\n    resetScreen() {\n        // Reset Screen\n        for (let x = 0; x < 5; x++) {\n            for (let y = 0; y < 5; y++) {\n                led.unplot(x, y)\n            }\n        }\n    }\n\n    render() {\n        this.resetScreen();\n        // Draw Player Pixel to Screen\n        this.player.draw();\n        for (let b of this.blocks) {\n            b.draw();\n        }\n    }\n}\n\n\nclass Player {\n\n    xpos: number;\n    ypos: number;\n    xpix: number;\n    ypix: number;\n    constructor() {\n        this.xpos = 1;\n        this.ypos = 1;\n    }\n\n    draw() :void {\n        this.xpix = this.xpos - 1;\n        this.ypix = 5 - this.ypos;\n        led.plot(this.xpix, this.ypix);\n    }\n}\n\nclass Block {\n    \n    xpos: number;\n    ypos: number;\n    xpix: number;\n    ypix: number;\n\n    game: Game;\n\n    constructor(game: Game) {\n        this.ypos = 6;\n        // this.xpos = randint(1, 5);\n        this.xpos = game.player.xpos;\n        \n        this.game = game;\n        this.game.addBlock(this);\n    }\n\n    checkCollision() :boolean {\n        if (this.xpos == this.game.player.xpos && this.ypos == 1) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    draw() :void {\n        this.xpix = this.xpos - 1;\n        this.ypix = 5 - this.ypos;\n        led.plot(this.xpix, this.ypix);\n    }\n}\n\n// Init\nlet myPlayer = new Player();\nlet myGame = new Game(myPlayer);\n\n// INIT: Countdown\nfor (let i = 3; i >= 1; i--){\n    basic.showNumber(i);\n}\n\n// Game Clock\nlet interval: number = 600;\nloops.everyInterval(interval, function () {\n    for(let b of myGame.blocks){\n        b.ypos -= 1;\n    }\n})\n\nloops.everyInterval(interval*2.5, function () {\n    let newB = new Block(myGame);\n})\n\n// Loop\nbasic.forever(function() {\n    if (myGame.running) {\n        myGame.update();\n        myGame.render();\n    } else {\n        basic.showNumber(myGame.score);\n    }\n})\n","README.md":"","pxt.json":"{\n    \"name\": \"myJsTest\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1761676190928}